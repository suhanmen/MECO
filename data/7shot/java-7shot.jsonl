{"src": "import java.io.*;\nimport java.util.*;\npublic class Hack{\npublic static void main(String[] args){\nScanner sc = new Scanner(System.in);\nint n=sc.nextInt();\nint[] arr = new int[n];\nfor(int i=0;i<n;i++)\narr[i]=sc.nextInt();\nArrays.sort(arr);\nSet<Integer> set = new TreeSet<Integer>();\nfor(int i=0;i<n;i++){\nboolean flag=false;\nfor(Integer x:set){\nif(arr[i]%x==0){\nflag=true;\nbreak;\n}\n}\nif(!flag)\nset.add(arr[i]);\n}\nSystem.out.println(set.size());\n}\n}\n", "complexity": "quadratic", "problem": "1209_A", "from": "CODEFORCES", "tags": "greedy,implementation,math"}
{"src": "import java.util.*;\npublic class Main {\npublic static void main(String [] args){\n\tScanner in=new Scanner(System.in);\n\tint n=in.nextInt();\n\tdouble value[][]=new double[n][n];\n\tfor(int i=0;i<n;i++)\n\t\tfor(int j=0;j<n;j++)value[i][j]=in.nextDouble();\n\t\tdouble ans[]=new double[1<<n];\n\t\tint mask=(1<<n);\n\t\tans[(1<<n)-1]=1.0;\n\t\tfor(int i=mask-1;i>=0;i--){\n\t\tint cnt=Integer.bitCount(i);\n\t\tint pairs=cnt*(cnt-1)/2;\n\t\tfor(int j=0;j<n;j++){\n\t\tif(((i>>j)&1)==0)continue;\n\t\tfor(int k=j+1;k<n;k++){\n\t\tif(((i>>k)&1)==0)continue;\n\t\tans[i^(1<<k)]+=ans[i]*value[j][k]/pairs;\n\t\tans[i^(1<<j)]+=ans[i]*value[k][j]/pairs;\n\t\t}\n\t\t}\n\t\t}\n\t\tfor(int i=0;i<n;i++)\n\t\t\tSystem.out.print(ans[1<<i]+\" \");\n\t\t\n}\n}\n    ", "complexity": "np", "problem": "0016_E", "from": "CODEFORCES", "tags": "bitmasks,dp,probabilities"}
{"src": "import java.util.*;\npublic class Main\n{\n     public static void main(String args[])\n     {\n          Scanner sc = new Scanner(System.in);\n          int n = sc.nextInt();\n          System.out.println((int)Math.pow(n+1,2)/4);\n     }\n}", "complexity": "linear", "problem": "0909_B", "from": "CODEFORCES", "tags": "constructive algorithms,math"}
{"src": "public class P1 {\n\t\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(\"25\");\n\t}\n\n}", "complexity": "constant", "problem": "0630_A", "from": "CODEFORCES", "tags": "number theory"}
{"src": "import java.util.*;\nimport java.lang.Math; \n\npublic class Main{   \n\t\n\tpublic static void main(String[] args){ \n\t\tScanner ak=new Scanner(System.in);\n\t\tlong n,k,x;\n\t\tn=ak.nextLong();\n\t\tk=ak.nextLong();\n\t\tx=(long)((-3+Math.sqrt(9+8*(n+k)))/2);\n\t\tSystem.out.println(n-x);\n\t}\n}", "complexity": "logn", "problem": "1195_B", "from": "CODEFORCES", "tags": "binary search,brute force,math"}
{"src": "import java.util.*;\n\npublic class Main{\n\tpublic static void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tTreeSet<Integer> set = new TreeSet<Integer>();\n\n\t\tfor(int i=0;i<n;i++){\n\t\t\tset.add(sc.nextInt());\n\t\t}\n\n\t\tif(set.size() >= 2)\n\t\t\tSystem.out.println(set.toArray()[1]);\n\t\telse\n\t\t\tSystem.out.println(\"NO\");\n\t}\n}\n", "complexity": "nlogn", "problem": "0022_A", "from": "CODEFORCES", "tags": "brute force"}
{"src": "import java.util.Scanner;\n\n\npublic class P23A {\n\n\tpublic static void main(String[] args) {\n\n\t\tScanner in = new Scanner(System.in);\n\t\tString s = in.nextLine();\n\t\tint max = 0;\n\t\tfor(int i = 0; i < s.length(); i++)\n\t\t\tfor(int k = s.length(); k > max + i; k--)\n\t\t\t\tif(s.substring(i + 1).contains(s.substring(i,k)))\n\t\t\t\t\tmax = k - i; \n\t\tSystem.out.println(max);\n\t}\n\n}\n", "complexity": "cubic", "problem": "0023_A", "from": "CODEFORCES", "tags": "brute force,greedy"}
