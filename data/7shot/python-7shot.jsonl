{"src": "details=[4,7,44,77,444,777,47,74,447,774,474,747,477]\nn=int(input())\nf=0\nfor i in details:\n    if n%i==0:\n        f=1 \n        break \nif f:\n    print(\"YES\")\nelse:\n    print(\"NO\")", "complexity": "constant", "problem": "0122_A", "from": "CODEFORCES", "tags": "brute force,number theory"}
{"src": "mod = 10 ** 9 + 7\nx, k = map(int, input().split())\nif x != 0:\n    print((pow(2, k + 1, mod) * x - pow(2, k, mod) + 1) % mod)\nelse:\n    print(0)\n\n        \n\n\n\n", "complexity": "logn", "problem": "0992_C", "from": "CODEFORCES", "tags": "math"}
{"src": "import math\nimport sys\n\nn=int(input())\ns=list(map(int,input().split()))\nce=list(map(int,input().split()))\n\nbest=10**9\nfor j in range(1,n-1):\n    a=ce[j];b=10**9;c=10**9\n    for i in range(j-1,-1,-1):\n        if s[i]<s[j]:\n            b=min(b,ce[i])\n    for k in range(j+1,n):\n        if s[k]>s[j]:\n            c=min(c,ce[k])\n    best=min(best,a+b+c)\n\nif best>=10**9:\n    print(-1)\nelse:\n    print(best)", "complexity": "quadratic", "problem": "0987_C", "from": "CODEFORCES", "tags": "brute force,dp,implementation"}
{"src": "n = int(input())\ndicta = {}\ndictb = {}\nfor i in range(n):\n    a, x = map(int, input().split())\n    dicta[a] = x\nm = int(input())\nfor i in range(m):\n    b, y = map(int, input().split())\n    dictb[b] = y\nans = 0\nfor i in dicta.keys():\n    if i in dictb.keys():\n        ans += max(dicta[i], dictb[i])\n        del dictb[i]\n    else :\n        ans += dicta[i]\nfor i in dictb.values():\n    ans += i\nprint(ans)\n", "complexity": "nlogn", "problem": "0981_B", "from": "CODEFORCES", "tags": "sortings"}
{"src": "def subsets(S):\n    sets = []\n    len_S = len(S)\n    for i in range(1 << len_S):\n        subset = [S[bit] for bit in range(len_S) if i & (1 << bit)]\n        sets.append(subset)\n    return sets\n    \nn, l, r, x = list(map(int, input().split()))\nproblems = list(map(int, input().split()))\nres = 0\nfor m in subsets(problems):\n    if l <= sum(m) <= r and (max(m) - min(m)) >= x:\n        res += 1\nprint(res)", "complexity": "np", "problem": "0550_B", "from": "CODEFORCES", "tags": "bitmasks,brute force"}
{"src": "def main():\n    import sys\n    input = sys.stdin.readline\n\n    a = int(input())\n    b = int(input())\n    a = list(str(a))\n    a.sort()\n    ans = []\n    while a:\n        for i in range(len(a) - 1, -1, -1):\n            c = ans + [a[i]] + a[:i] + a[i+1:]\n            if int(''.join(c)) <= b:\n                ans.append(a[i])\n                a.pop(i)\n                break\n    print(''.join(ans))\n\n\nmain()", "complexity": "cubic", "problem": "0915_C", "from": "CODEFORCES", "tags": "dp,greedy"}
{"src": "def f():\n    b = [a[0]]\n    for e in a[1:]:\n        if b != []:\n            if e == b[-1] or abs(e-b[-1])%2==0:\n                b.pop()\n\n            else:\n                b.append(e)\n        else:\n            b.append(e)\n\n    for i in range(1,len(b)):\n        if abs(b[i]-b[i-1])%2:\n            print('NO')\n            return\n\n    print('YES')\n\nn=int(input())\na=[int(i) for i in input().split()]\n\n\nf()", "complexity": "linear", "problem": "1092_D1", "from": "CODEFORCES", "tags": "greedy,implementation,math"}
